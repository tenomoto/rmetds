---
title: "Rを気象研究に使う"
author: "榎本剛"
format:
  revealjs:
    footer: <https://www.dpac.dpri.kyoto-u.ac.jp/enomoto/rmetds>
    slide-number: true
    chalkboard:
      buttons: false
    preview-links: auto
    auto-stretch: false
bibliography: refs.bib
---

## Rが使われている分野

気象ではあまり使われていない。

- 統計学
- 医学
- 生物学
- 計量経済学
- 計量政治学

## 気象学

気象は統計を軽視していないか。

- 「天気図」つまり等値線やベクトルが中心
- データ解析や数値実験の結果の見た目だけでよいか。
- 統計は気象の重要な一部
    - 境界層や自由大気の乱流、スペクトル
    - 雲粒やエアロゾルの粒径分布
    - アンサンブル

## Rは統計言語を超越

@Gagolewski:2024

Let’s get one thing straight: R is *not just a statistical package*.
It is a general-purpose, high-level programming language that happens to be very powerful for **numerical**, **data-intense computing** activities of any kind.
It offers extensive support for statistical, **machine learning**, **data analysis**, data wrangling, and **data visualisation** applications, but there is much more.

## Rは何なのか

- 思いつきの確認、データ探索、高速プロトタイプの道具
- Python + pandas + matplotlibやJulia、MATLABに相当するプログラミング環境
- 再現性のある科学 (@Schwab-etal:2000;@Gentleman-TempleLang:2007;@Marwick-etal:2018)

## Pythonに疲れてませんか {.scrollable}

::: {.panel-tabset}

### Python

```{python}
#| echo: true
#| error: false

import numpy as np
from scipy.stats import norm
import matplotlib.pyplot as plt

fig, ax = plt.subplots()

x = np.linspace(-5, 5, 101)
y = norm.pdf(x)
ax.plot(x, y)
ax.set_title("normal distribution")
ax.set_xlabel("x")
ax.set_ylabel("y")
plt.show()
```
### R

```{r}
#| echo: true
curve(dnorm, -5, 5, main="normal distribution", xlab="x", ylab="y")
```

:::

## Rの特徴

- 基本的な数学函数、統計、行列計算、描画を含む。
- 添字は1始まり。
- 配列`array()`や行列`matrix()`は列優先で数式と対応。
- 函数型
- Copy on modify
- 環境構築のしやすさ
    - バッケージ [CRAN](https://ftp.yz.yamagata-u.ac.jp/pub/cran/)
    - [WindowsのRtools](https://www.dpac.dpri.kyoto-u.ac.jp/enomoto/dass2024/setup.html)でコンパイル環境まで整う。

## RStudio

![](../RStudio.png)

## Rでここまでできる

![](../rmetds.png){width=10%}[Rによる気象データサイエンス](https://www.dpac.dpri.kyoto-u.ac.jp/enomoto/rmetds)

- テキスト処理 [stringi](https://stringi.gagolewski.com/), [stringx](https://stringx.gagolewski.com/), [stringr](https://stringr.tidyverse.org/)
- 回帰分析、主成分分析、[データ同化](https://www.dpac.dpri.kyoto-u.ac.jp/enomoto/dass2024/)
- モデル: 前線形成、Poisson方程式、Lorenz-96
- 機械学習、[画像処理](https://dahtah.github.io/imager/imager.html)、3D可視化[rgl](https://dmurdoch.github.io/rgl/)
- 他の言語とのインターフェース

## 線型回帰 {.scrollable}

```{r}
#| echo: true
df <- read.csv("../co2_annual_20221026.csv")
lm.co2 <- lm(df$co2.global.mean.ppm. ~ df$year)
plot(df$year, df$co2.global.mean.ppm.,
     main="Global Mean CO2 concentration",
     xlab="year", ylab="CO2 ppm")
abline(lm.co2)
```

## NCEP再解析

```{r}
library(terra)
library(RNetCDF)

nc <- open.nc("../slp.mon.ltm.nc")
slp <- var.get.nc(nc, "slp")
slp.ras <- rast(xmin=0, xmax=360, ymin=-90, ymax=90, ncols=144, nrows=73)
values(slp.ras) <- t(slp[,,1])
slp.ras.c <- crop(slp.ras, ext(0, 360, -30, 90))

cshp <- "../ne_50m_coastline/ne_50m_coastline.shp"
c50 <- vect(cshp)

newcrs <- "+proj=stere +lon_0=135e +lat_0=90n"
c50p <- project(c50, newcrs)

slp.ras.p <- project(slp.ras.c, newcrs)
g <- graticule(30, 30, crs=newcrs)
plot(slp.ras.p, axes=FALSE, ext=ext(-1e+7, 1e7, -1e7, 1e7), main="January  Climatological SLP hPa")
plot(c50p, add=TRUE)
plot(g, add=TRUE)
```

## Lorenz-96

```{r}
l96 <- function(x, F) {
  n <- length(x)
  (x[c(2:n, 1)] - x[c(n-1, n, 1:(n-2))]) * x[c(n, 1:(n-1))] - x + F
}

rk4 <- function(f, x, dt, opts) {
  k1 <- f(x, opts)
  k2 <- f(x + 0.5 * dt * k1, opts)
  k3 <- f(x + 0.5 * dt * k2, opts)
  k4 <- f(x + dt * k3, opts)
  x + (k1 + 2 * k2 + 2 * k3 + k4) * dt / 6
}

nj <- 40
nstep <- 1001
x.hist <- matrix(0, nj, nstep)
x <- rnorm(nj)
F <- 8
dt <- 0.05
for (i in 1:nstep-1) {
  x <- rk4(l96, x, dt, F)
  x.hist[,i] <- x
}

t <- seq(0, nstep*dt, length.out=nstep)
filled.contour(1:nj, t, x.hist, nlevel=11, main=paste("Lorenz 96 F=", F),
               ylim=rev(range(t)), xlab="j", ylab="time")
```

## 表をきれいに

```{r}
f <- function(x) {x^(9/2)}
analytic <- function(x) {9/2 * x^(7/2)}

fd <- function(f, x, h) {
  0.5 * (f(x + h) - f(x - h)) / h
}

csda <- function(f, x, h) {
  Im(f(x + 1i * h) / h)
}

x <- 1.5
h <- 0.1^(16:13)
df.fd <- fd(f, x, h)
df.csda <- csda(f, x, h)
df.true <- analytic(x)
```
```{r}
#| echo: true
library(tinytable)
df <- data.frame(h, df.fd, df.csda)
colnames(df) <- c("h", "FD", "CSDA")
tab <- tt(df)
format_tt(tab, j=2:3, digits = 16)
```

## Quarto

RMarkdownの進化形

- このスライドはMarkdownを拡張した記法で、<br>[Quarto](https://quarto.org/)を使って作成。
- 数式、RやPythonなどコードの実行。
- [Pandoc](https://pandoc.org/)を使ってHTML、LaTeX、Wordなどに出力。
- `bib`ファイルによる文献引用。

## 参考文献

::: {#refs}